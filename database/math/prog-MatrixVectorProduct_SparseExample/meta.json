{
    "filename": "prog-MatrixVectorProduct_SparseExample.tex",
    "title": "",
    "subtitle": "",
    "coding": "",
    "mathFields": "",
    "tags": "Linear Algebra, Python",
    "relatedExercises": "",
    "solutionLength": "",
    "task": "\\section{Matrix-Vector Product for a Sparse Matrix}\nConsider the matrix $A \\in \\mathbb{R}^{n \\times n}$ given by \n$$A = \\begin{pmatrix}\n2 & -1 \t\t& 0  &\\cdots & 0\\\\\n-1 & 2 \t\t& -1  &\\ddots &  \\vdots\\\\\n 0 & \\ddots  \t\t&\\ddots   \t &\\ddots  & 0 \\\\\n\\vdots    & \\ddots  \t\t&-1  \t &2 & -1\\\\\n0 & \\cdots \t&  0  &-1 & 2\\\\\n\\end{pmatrix}$$\n\nand implement the matrix-vector product $A \\cdot x$ for some vector $x\\in \\mathbb{R}^n$ in three different ways:\n\n\\begin{enumerate}\t\n\t\\item Implement the matrix $A$ as a \\verb|numpy.ndarray| and define a function \\verb|dense(x)| which computes and outputs the numpy \t\t\tmatrix-vector product \\verb|A@x|. Print the number of Gbytes which are needed to store the matrix (you can use the attribute \\verb|A.nbytes|).\n\t\\item Implement a function \\verb|matfree(x)| which outputs the matrix-vector product $A \\cdot x$ without using the matrix $A$ explicitly.\n\t\\item The ``correct'' way in Python: Use the modul \\texttt{scipy.sparse} to implement the matrix $A$ in CSR (compressed sparse row) format and define a function \\verb|sparse(x)| which computes and outputs the matrix-vector product using this CSR object. Print the number of Gbytes which are needed to store the matrix in CSR format (have a look at: \\texttt{A.data}, \\texttt{A.indptr}, \\texttt{A.indices}).\n\\end{enumerate}\nPlay around with the dimension $n$ and measure the time which is needed in each way to compute the matrix-vector product for a random input vector \\verb|x = numpy.random.rand(n)|.\\\\\n\n\\textit{Hint:} In the IPython shell you can simply use the \\textit{magic function} \\verb|%timeit| to measure the time for a certain operation. For example, you can type \\verb|%timeit dense(x)|.  \n",
    "solution": "\\lstinputlisting[numbers=none]{prog-MatrixVectorProduct_SparseExample_solution.py}\n",
    "id": ""
}