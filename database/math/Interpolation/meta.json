{
    "filename": "Interpolation.tex",
    "title": "",
    "subtitle": "",
    "coding": "",
    "mathFields": "",
    "tags": "",
    "relatedExercises": "",
    "solutionLength": "",
    "task": "\\section{Interpolation}\nLet $(x_1,y_1), (x_2,y_2)$ and $(x_3,y_3)$ be points in the real plain $\\mathbb{R}^2$. If $x_i \\neq x_j$ for $i \\neq j$ there is exactly one \nparabola $f\\colon \\mathbb{R} \\to \\mathbb{R}$ (i.e., there are uniquely determined coefficients $a,b,c \\in \\mathbb{R}$) which satisfies\n\\begin{align}\nf(x_i) = ax_i^2 + b x_i + c = y_i \\label{eq} ~~~~~~\\text{for all $i=1,2,3$.}\n\\end{align}\n\n\\begin{enumerate}\n\t\\item Please implement a function \\verb|interpolate(data)| which takes the points $(x_i, y_i)$ for $i=1,2,3$ as arguments and returns\n\tthe coefficients $a,b,c$, for which \\eqref{eq} holds.\n\t\\item Implement a function \\verb|parabola(x, coeff)| which evaluates a parabola depending on an argument $x$ and some coefficients $a,b,c$. Then randomly generate some data points $(x_i, y_i)$ for $i=1,2,3$, determine the corresponding coefficients $a,b,c$ with \\verb|interpolate(data)| and create a plot which contains the pairs $(x_i, y_i)$ for $i=1,2,3$ and the associated fitted function $f$ from \\eqref{eq} with the determined coefficients.\n\t\\item Assume the measuring points $x_1, x_2$ and $x_3$ are fixed and we want to obtain many interpolations for different values of $y_1, y_2, y_3$. What could be changed in your implementation to possibly make it more efficient?\n\\end{enumerate}\n\\textit{Hint: } Interpret task (i) as linear system of equations and solve it with \\verb|linalg.solve|. \n%If you are already familiar with the definition of classes in Python you could use an appropriate class definition to solve (iii).",
    "solution": "",
    "id": ""
}