{
    "filename": "prog-SolveLU.tex",
    "title": "",
    "subtitle": "",
    "coding": "",
    "mathFields": "",
    "tags": "Linear Systems, Factor and Solve, Python",
    "relatedExercises": "",
    "solutionLength": "",
    "task": "% !TeX spellcheck = en_US\n\\textbf{Solve with LU decomposition [Direct method]}\n%\\textit{\\color{red} More info during next class (May 18).}\n\\begin{enumerate}\n\t\\item Implement a routine \\texttt{lu,piv = lu\\_factor(A)} which computes the $LU$ decomposition $PA = LU$ (by applying Gaussian elimination with row pivoting; see Algorithm \\ref{LUwithRowPiv}) for a given matrix $A \\in \\mathbb{R}^{n\\times n}$ and another routine \\texttt{lu\\_solve((lu, piv), b)} which takes the output of \\texttt{lu\\_factor(A)} and returns the solution $x$ of $Ax=b$ for some $b\\in \\mathbb{R}^{n}$ (in case the system admits an \\textit{unique} solution).\n\t\\begin{itemize}\n\t\t\\item Store $L$ and $U$ in one array \\texttt{lu} and the permutation $P$ as sparse representation in an array \\texttt{piv}.\n\t\t\\item If the system $Ax=b$ admits an unique solution then compute it by using your routine \\texttt{solve\\_tri} from previous exercises or an appropriate SciPy routine. If the system is not uniquely solvable, check whether the system has infinitely many or no solution and give the user a respective note.\n\t\t\\item \\textit{Hint:} With the numpy routines \\texttt{numpy.triu} and \\texttt{numpy.tril} you can extract the factors $L$ and $U$ from the array \\texttt{lu}. Also observe that we expect $A$ to be of square format (for simplicity).\t\t\n\t\\end{itemize}\n\\item Test your routine at least on the systems which you were asked to solve by hand previously. Verify that $PA = LU$ and potentially $Ax = b$. For this purpose you can use \\texttt{numpy.allclose()}. %Note that you might obtain different factors $P,L,U$ depending on your choice of pivots, but the solution $x$ should be the same if the system admits an unique solution.\n\\item Find SciPy routines to perform the factorization and solution steps and compare to your routine.\n\\end{enumerate}\n\n\n\\begin{center}\n\t~~~~~\\begin{algorithm}\n\t\t\\textbf{INPUT:} $A\\in \\mathbb{R}^{n \\times n}$\\\\\n\t\t\\textbf{OUTPUT:} LU decomposition $PA = LU$\\\\~\\\\\n\t\t{\\color{gray}\\texttt{\\# \\textbf{FACTORIZATION}}}\\\\\n\t\tinitialize \\texttt{piv = [1,2,...,n]}\\\\\n\t\t\\For{$j = 1,...,n-1$}{\n\t\t\t{\\color{gray}\\texttt{\\#  \\textbf{Find the j-th pivot pivot}}}\\\\\n\t\t\t$k_j := \\arg \\max_{k\\geq j} |a_{kj}|$ \\\\\n\t\t\t\\If{$a_{k_jj}\\neq 0$}{\n\t\t\t\t{\\color{gray}\\texttt{\\# \\textbf{Swap rows}}}\\\\\n\t\t\t\tA[$k_j$,:] $\\leftrightarrow$ A[j,:]\\\\\n\t\t\t\t\\texttt{piv}[$k_j$] $\\leftrightarrow$ \\texttt{piv}[j]\\\\\n\t\t\t\t{\\color{gray}\\texttt{\\# \\textbf{Elimination}}}\\\\\n\t\t\t\t\\For{$k = j+1,\\dots,n$}{\n\t\t\t\t\t$\\ell_{kj} := a_{kj} / a_{jj}$\\\\\n\t\t\t\t\t$a_{kj} = \\ell_{kj}$\\\\\n\t\t\t\t\t\n\t\t\t\t\t\\For{$i = j+1,\\ldots, n$}{\n\t\t\t\t\t\t$a_{ki} = a_{ki} - \\ell_{kj} a_{ji}$\\\\\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\\caption{In-place Gaussian Elimination with Row Pivoting for implementing Factorization (same as above just without the $b$ vector.)}\n\t\t\\label{LUwithRowPiv}\n\t\\end{algorithm}\t\n\\end{center}",
    "solution": "\\lstinputlisting[numbers=none]{prog-SolveLU_solution.py}\n",
    "id": ""
}