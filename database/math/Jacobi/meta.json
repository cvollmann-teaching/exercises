{
    "filename": "Jacobi.tex",
    "title": "",
    "subtitle": "",
    "coding": "",
    "mathFields": "",
    "tags": "",
    "relatedExercises": "",
    "solutionLength": "",
    "task": "\\begin{algorithm}\n\\fvset{numbers=left}\n%\\begin{lstlisting}[language=python,numbers=left]\n\\begin{Verbatim}\ndef fun(A,b, m=50):\n    n = A.shape[1]\n    x = np.zeros(n)\n    N = 1/A.diagonal()\t\t\n    for k in range(m):\n        x = x - N * (A @ x - b)\n        return x\n\\end{Verbatim}\n%\\end{lstlisting}\n\t\n\t\\caption{Unknown Python code}\n\\end{algorithm}\n\t\\begin{enumerate}\n\t\t\\item Please describe what each line of the code does (please do not write into the pseudocode).\n\t\t\\item Which algorithm is implemented and what is its purpose? Which role does \\verb|N| play here?\n\t\\end{enumerate}\n\n",
    "solution": "{\\color{solution}\n\\begin{enumerate}\n\t\\item \\begin{align*}\n\t\\textcolor{exampoints}{(1P)}~&1~ \\text{function declaration with input}~ A,b,m:=50\\\\\n\t\\textcolor{exampoints}{(1P)}~&2~\\text{set}~n:=~\\text{number of columns of}~A\\\\\n\t\\textcolor{exampoints}{(1P)}~&3~\\text{set}~x=(0,\\dots,0)^T\\in\\mathbb{R}^n\\\\\n\t\\textcolor{exampoints}{(1P)}~&4~\\text{set}~N=(\\frac{1}{a_{11}},\\dots,\\frac{1}{a_{nn}})^T~\\text{(inverting diagonal elements)}\\\\\n\t&5~/\\\\\n\t\\textcolor{exampoints}{(1P)}~&6~\\text{for-loop from}~k=0~\\text{to}~k=m-1\\\\\n\t\\textcolor{exampoints}{(1P)}~&7~\\text{update}~x~\\text{by}~x-D^{-1}(Ax-b),~D\n\t=\\begin{pmatrix}a_{11}& &0\\\\ &\\ddots& \\\\0& &a_{nn}\\end{pmatrix}\\\\\n\t\\textcolor{exampoints}{(1P)}~&8~\\text{output value of}~x\n\t\\end{align*}\n\t\\item \\begin{align*}\\textcolor{exampoints}{(1P)}~&\\text{ Jacobi iteration}\\\\\n\t\\textcolor{exampoints}{(1P)}~&\\text{solve}~Ax=b~\\text{iteratively}\\\\\n\t\\textcolor{exampoints}{(1P)}~&N~\\text{is preconditioner}~(\\text{with the ''hope''}~\\rho(I-NA)<1)\\end{align*}\n\\end{enumerate}\n}",
    "id": ""
}